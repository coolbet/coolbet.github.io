

[
  
  
    
    
      {
        "title": "Harbor and DefectDojo - Here comes Hardojo",
        "excerpt": "Hardojo\n\nHardojo is a small new piece of code that is in the works, and for which you can find the code on\nour Github page.\n\nWhat\n\nA good Information Security practice would include managing and tracking Vulnerabilities as they\ncome and, especially, as they go. DefectDojo is\nan OWASP Flagship Product that allows to manage your application security program, maintain product and application information, schedule scans, triage vulnerabilities and push findings into defect trackers.\nIn order to have a good overview of own vulnerabilities, data from all the different parts of a system\nneeds to be ingested into Dojo.\n\nDocker Images are built, created and updated daily. Moreover, every system which runs on\nmicroservices has probably hundreds -if not thousands- of them. This makes tracking changes manually\nextremely cost-inefficient, tedious and sometimes straight-up impossible.\nLuckily for us, Cloud-Native tools such as Harbor can help\nwith this by bundling together a container vulnerability scanner (such as Clair) together\nwith a very fancy image registry.\nUsing Harbor it is possible to force a vulnerability scan as soon as an image is pushed, giving us\nthe possibility to have always the latest status of all the vulnerabilities that exist in our\nimages.\n\nThe Problem\n\nThe problem encountered when we tried to put together these two pieces of a puzzle is that in Harbor\nevery image is completely independent, so it is hard to track which vulnerability gets solved over\ntime, how vulnerabilities relate to each other and how image inheritace spreads vulnerabilities\naround. Moreover, the volume of the images and the frequency of changes makes it impossible to\nmanually keep track of the vulnerabilities.\n\nIn order to properly manage container images vulnerabilities we wanted:\n\n\n  To have all data in Dojo\n  To have always fresh information\n  Not to do any manual work in the process\n\n\nHere comes Hardojo\n\nThe problem is simple, and so is the solution. Hardojo is nothing more than a Webhook consumer for\nHarbor and an API client for Dojo.\n\nHardojo will wait for Harbor to send a ‘scanCompleted’ webhook, and once this is received, will\nquery the scan result for the relevant image back to Harbor. Once the data is collected, will\norganize it and push it to Dojo.\n\nBy ‘organize’ it is meant a bundle of actions:\n\n\n  If the new image:tag has never been seen before, it creates a new Endpoint in Dojo, otherwise, gets\nthe ID for the endpoint that corresponds to that image. This allows to better track the images in\nthe registry and to logically group together scans for the same image.\n  Create a new Engagement for the endpoint-image. An engagement in dojo is one or more tests\nperformed in the same context.\n  Create a new Test within that engagement. A test can be intended as an action which produced a\nset of findings.\n  Finally, create a new Finding for every vulnerability that was collected and push them all to\nDojo.\n\n\nTechnical Details\n\nHardojo is written in GO and can be run as a standalone binary. A Dockerfile and a docker-compose\nmanifest is also available. Running it within Kubernetes should be also trivial. For more\ninformation, check the README file in the repository.\n\n",
        "content": "Hardojo\n\nHardojo is a small new piece of code that is in the works, and for which you can find the code on\nour Github page.\n\nWhat\n\nA good Information Security practice would include managing and tracking Vulnerabilities as they\ncome and, especially, as they go. DefectDojo is\nan OWASP Flagship Product that allows to manage your application security program, maintain product and application information, schedule scans, triage vulnerabilities and push findings into defect trackers.\nIn order to have a good overview of own vulnerabilities, data from all the different parts of a system\nneeds to be ingested into Dojo.\n\nDocker Images are built, created and updated daily. Moreover, every system which runs on\nmicroservices has probably hundreds -if not thousands- of them. This makes tracking changes manually\nextremely cost-inefficient, tedious and sometimes straight-up impossible.\nLuckily for us, Cloud-Native tools such as Harbor can help\nwith this by bundling together a container vulnerability scanner (such as Clair) together\nwith a very fancy image registry.\nUsing Harbor it is possible to force a vulnerability scan as soon as an image is pushed, giving us\nthe possibility to have always the latest status of all the vulnerabilities that exist in our\nimages.\n\nThe Problem\n\nThe problem encountered when we tried to put together these two pieces of a puzzle is that in Harbor\nevery image is completely independent, so it is hard to track which vulnerability gets solved over\ntime, how vulnerabilities relate to each other and how image inheritace spreads vulnerabilities\naround. Moreover, the volume of the images and the frequency of changes makes it impossible to\nmanually keep track of the vulnerabilities.\n\nIn order to properly manage container images vulnerabilities we wanted:\n\n\n  To have all data in Dojo\n  To have always fresh information\n  Not to do any manual work in the process\n\n\nHere comes Hardojo\n\nThe problem is simple, and so is the solution. Hardojo is nothing more than a Webhook consumer for\nHarbor and an API client for Dojo.\n\nHardojo will wait for Harbor to send a ‘scanCompleted’ webhook, and once this is received, will\nquery the scan result for the relevant image back to Harbor. Once the data is collected, will\norganize it and push it to Dojo.\n\nBy ‘organize’ it is meant a bundle of actions:\n\n\n  If the new image:tag has never been seen before, it creates a new Endpoint in Dojo, otherwise, gets\nthe ID for the endpoint that corresponds to that image. This allows to better track the images in\nthe registry and to logically group together scans for the same image.\n  Create a new Engagement for the endpoint-image. An engagement in dojo is one or more tests\nperformed in the same context.\n  Create a new Test within that engagement. A test can be intended as an action which produced a\nset of findings.\n  Finally, create a new Finding for every vulnerability that was collected and push them all to\nDojo.\n\n\nTechnical Details\n\nHardojo is written in GO and can be run as a standalone binary. A Dockerfile and a docker-compose\nmanifest is also available. Running it within Kubernetes should be also trivial. For more\ninformation, check the README file in the repository.\n\n",
        "url": "/security/auditing/docker/2020/04/03/Hardojo/"
      },
    
  
  
  
  {
    "title": "Categories",
    "excerpt": "Category index\n",
    "content": "\n",
    "url": "/categories/"
  },
  
  {
    "title": "Elements",
    "excerpt": "A demo of Markdown and HTML includes\n",
    "content": "Heading 1\n\nHeading 2\n\nHeading 3\n\nHeading 4\n\nHeading 5\n\nHeading 6\n\nA small element\n\nA link\n\nLorem ipsum dolor sit amet, consectetur adip* isicing elit, sed do eiusmod *tempor incididunt ut labore et dolore magna aliqua.\n\nDuis aute irure dolor in A link reprehenderit in voluptate velit esse cillum bold text dolore eu fugiat nulla pariatur. Excepteur span element sint occaecat cupidatat non proident, sunt italicised text in culpa qui officia deserunt mollit anim id some code est laborum.\n\n\n  An item\n  An item\n  An item\n  An item\n  An item\n\n\n\n  Item one\n  Item two\n  Item three\n  Item four\n  Item five\n\n\n\n  A simple blockquote\n\n\nSome HTML…\n\n&lt;blockquote cite=\"http://www.imdb.com/title/tt0284978/quotes/qt1375101\"&gt;\n  &lt;p&gt;You planning a vacation, Mr. Sullivan?&lt;/p&gt;\n  &lt;footer&gt;\n    &lt;a href=\"http://www.imdb.com/title/tt0284978/quotes/qt1375101\"&gt;Sunways Security Guard&lt;/a&gt;\n  &lt;/footer&gt;\n&lt;/blockquote&gt;\n\n\n…CSS…\n\nblockquote {\n  text-align: center;\n  font-weight: bold;\n}\nblockquote footer {\n  font-size: .8rem;\n}\n\n\n…and JavaScript\n\nconst blockquote = document.querySelector(\"blockquote\")\nconst bolden = (keyString, string) =&gt;\n  string.replace(new RegExp(keyString, 'g'), '&lt;strong&gt;'+keyString+'&lt;/strong&gt;')\n\nblockquote.innerHTML = bolden(\"Mr. Sullivan\", blockquote.innerHTML)\n\n\nSingle line of code\n\nHTML Includes\n\nContact form\n\n\n  \n    Contact\n    Name: *\n    \n\n    Email Address: *\n    \n\n    Message: *\n    \n\n    \n    \n    * indicates a required field\n\n    \n      \n      \n      \n    \n  \n\n\n\n\nPlease enable JavaScript to use the form.\n\n{% include site-form.html %}\n\n\nDemo map embed\n\n\n\n{% include map.html id=\"XXXXXX\" title=\"Coffee shop map\" %}\n\n\nButton include\n\nA button\n\nA button with icon  twitter\n\n\n{% include button.html text=\"A button\" link=\"https://david.darn.es\" %}\n{% include button.html text=\"A button with icon\" link=\"https://twitter.com/daviddarnes\" icon=\"twitter\" %}\n\n\nIcon include\n\ntwitter\ntwitter\n\n\n{% include icon.html id=\"twitter\" title=\"twitter\" %}\n[{% include icon.html id=\"linkedin\" title=\"twitter\" %}](https://www.linkedin.com/in/daviddarnes)\n\n\nVideo include\n\n\n  \n\n\n{% include video.html id=\"zrkcGL5H3MU\" title=\"Siteleaf tutorial video\" %}\n\n\nImage includes\n\n\n  \n  Image with caption\n\n\n\n  \n  Right aligned image\n\n\n\n  \n  Left aligned image\n\n\n\n  \n  \n\n\n{% include figure.html image=\"https://picsum.photos/600/800?image=894\" caption=\"Image with caption\" width=\"300\" height=\"800\" %}\n\n{% include figure.html image=\"https://picsum.photos/600/800?image=894\" caption=\"Right aligned image\" position=\"right\" width=\"300\" height=\"800\" %}\n\n{% include figure.html image=\"https://picsum.photos/600/800?image=894\" caption=\"Left aligned image\" position=\"left\" width=\"300\" height=\"800\" %}\n\n{% include figure.html image=\"https://picsum.photos/1600/800?image=894\" alt=\"Image with just alt text\" %}\n\n",
    "url": "/elements/"
  },
  
  {
    "title": "Blog",
    "excerpt": "\n",
    "content": "\n  \n    \n      \n        2020\n      \n      \n        Apr 03\n        Harbor and DefectDojo - Here comes Hardojo\n      \n    \n  \n\n\n\n",
    "url": "/"
  },
  
  {
    "title": "Search",
    "excerpt": "Search for a page or post you’re looking for\n",
    "content": "{% include site-search.html %}\n",
    "url": "/search/"
  }
  
]

